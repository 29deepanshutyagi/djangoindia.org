services:
  backend: &backend
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: djangoindia-backend
    volumes:
      - logs:/app/logs
      # - rabbitmq
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=djangoindia.settings.production
    command: /start-prod

  # worker:
  #   <<: *backend
  #   container_name: worker
  #   command: celery -A djangoindia worker -l info 
  #   ports: []
  #   depends_on:
  #     - backend
  #     - postgres
  #     - rabbitmq

  postgres:
    image: postgres:14.1-alpine
    container_name: postgres
    env_file:
      - .env.production
    healthcheck:
      test:
        - CMD-SHELL
        - "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}"
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data
    expose:
      - 5432

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: frontend
    volumes:
      - ./frontend:/app/frontend
    depends_on:
        - backend
        - postgres
    env_file:
      - frontend/.env
    ports:
      - "3000:3000"
  
  nginx:
    build:
      context: ./nginx
      dockerfile: dockerfile.nginx
    container_name: nginx
    volumes:
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"  # RabbitMQ default port
  #     - "15672:15672"  # Management UI port
  
volumes:
  logs:
  nginx_logs:
  postgres:
  frontend:
